# -*- coding: utf-8 -*-
# vim: set ft=python :

import decimate.projects
from decimate.projects.svn import *
from decimate.projects.ant import *
from decimate.projects.statuspublishing import *
from decimate.projects.otherbuilds import *
from decimate.projects.emailnotify import *
from decimate.projects.filespublishing import *
from decimate.projects.junitpublishingant import *

import os
import re
import glob

baseSvnPath = "reviki/branches/dsl"
svnUrls = ["http://svn.reviki.org/svn/" + baseSvnPath, ]


class RevikiProject(StatusPublishingProject):
    name = "Reviki"
    category = "3rd Party"

    def getTestConfigurations(self):
        return [
                 BuildDist("Build", platform = "linux2", jdk = "1.5"),
                 #BuildDist("Build (Win32)", platform = "win32",  jdk = "1.5"),
                 #BuildDist("Build (OS X)", platform = "darwin", jdk = "1.5"),
               ]


class BuildDist(StatusPublishingTestConfiguration, SvnTestConfiguration, EmailTestConfiguration, JUnitPublishingAntTestConfiguration, AntTestConfiguration, FilesPublishingTestConfiguration):
    svnUrls = svnUrls
    antTargets = [(baseSvnPath, "unit-tests"), (baseSvnPath, "war")]
    emailAddresses = ['reviki-dev@corefiling.com']
    publishFilesBase = baseSvnPath
    publishFiles = ["*.war"]
    xmlJUnitResultsPatterns = [os.path.join(baseSvnPath, 'reports', '*.xml')]

    def getFilesArchiveFrequency(self, timestamp):
        if (time.time() - timestamp) > (3600*24*7*12):
            return 3600*24*7*4 # one per month more than 3 months ago
        if (time.time() - timestamp) > (3600*24*7*6):
            return 3600*24*7 # one per week more than 6 weeks ago
        if (time.time() - timestamp) > (3600*24*7):
            return 3600*24 # one per day more than a week ago
        if (time.time() - timestamp) > (3600*24):
            return 3600 # one per hour more than a day ago
        return 0 # keep all of today's builds
