# -*- coding: utf-8 -*-
from __future__ import absolute_import

import os
import re
import glob

from decimate.projects import urlImport
from decimate.projects.svn import SvnTestConfiguration
from decimate.projects.ant import AntTestConfiguration
from decimate.projects.statuspublishing import StatusPublishingProject, StatusPublishingTestConfiguration
from decimate.projects.otherbuilds import OtherBuildsTestConfiguration
from decimate.projects.emailnotify import EmailTestConfiguration
from decimate.projects.junitpublishingant import JUnitPublishingAntTestConfiguration
from decimate.util import fileutil, processutil

thisProject = "Reviki"
emailAddresses = ["reviki-fires@corefiling.com"]
baseSvnPath = "reviki/trunk"
svnUrls = ["http://svn.reviki.org/svn/" + baseSvnPath]

urlImport("https://svn-dev.int.corefiling.com/svn/devel/decimate/sharedConfigs/trunk/cfl.py", names = ["ExpiringArchiveTestConfiguration", "PublishedReleasesTestConfiguration", "TriggerHostingTestConfiguration"])
web = urlImport("https://svn-dev.int.corefiling.com/svn/devel/decimate/sharedConfigs/trunk/web.py")
apache = urlImport("https://svn-dev.int.corefiling.com/svn/devel/decimate/sharedConfigs/trunk/apache.py")


class RevikiProject(StatusPublishingProject):
    name = thisProject
    category = "3rd Party/Reviki"
    provides = {"default": "Build"}

    def getTestConfigurations(self):
        return [
            BuildDist("Build", platform = "linux2", jdk = "1.6"),
            WebTests("Web Tests", platform = "linux2", jdk = "1.6"),
            PublishedReleases("Published Releases", platform="linux2"),
         ]


class BuildDist(StatusPublishingTestConfiguration, SvnTestConfiguration, EmailTestConfiguration, JUnitPublishingAntTestConfiguration, AntTestConfiguration, ExpiringArchiveTestConfiguration, TriggerHostingTestConfiguration):
    svnUrls = svnUrls
    emailAddresses = emailAddresses
    antTargets = [(baseSvnPath, "unit-tests"), (baseSvnPath, "release")]
    publishFilesBase = os.path.join(baseSvnPath, "release")
    publishFiles = ["*"]
    xmlJUnitResultsPatterns = [os.path.join(baseSvnPath, "reports", "*.xml")]
    triggerableBuilds = [("Reviki", "Published Releases")]
    triggerUsesForce = True


class WebTests(StatusPublishingTestConfiguration, apache.ApacheTestConfiguration, OtherBuildsTestConfiguration, EmailTestConfiguration, SvnTestConfiguration, AntTestConfiguration, web.JettyTestConfiguration):
    svnUrls = svnUrls
    emailAddresses = emailAddresses
    antTargets = [(baseSvnPath, "functional-tests-external")]
    otherBuilds = [{"projectName": thisProject}]

    modules = apache.ApacheTestConfiguration.modules + ["dav", "dav_svn", "authn_core", "authn_file", "authz_core", "authz_user", "auth_basic"]
    extraDirectives = """
<Location /subversion>
  DAV svn
  SVNPath ${SVN_PATH}
  ## Reviki requires authentication or there will be issues with locking.
  AuthType Basic
  AuthBasicProvider file
  AuthName "Subversion repository"
  AuthUserFile ${SVN_PATH}/conf/svn-auth-file
  Require valid-user
</Location>"""

    def setUp(self):
        # Do this here, when we have been put in the right tmp directory.
        self.revikiDataDir = os.path.join(os.getcwd(), "reviki-data-dir")
        self.jettyContextParameters = {
            "javax.servlet.jsp.jstl.fmt.timeZone": "Europe/London",
            "reviki-data-dir": self.revikiDataDir,
        }

        self.log("Creating SVN repository")
        self.revikiSvnPath = os.path.join(os.getcwd(), "test-reviki-svn")
        processutil.doExec(["svnadmin", "create", self.revikiSvnPath])
        processutil.doExec(["svn", "mkdir", "-m", "'create test dir'", "file:////" + self.revikiSvnPath + "/test"])
        processutil.doExec(["svn", "mkdir", "-m", "'create test dir'", "file:////" + self.revikiSvnPath + "/test/decimate-test-wiki-data"])
        self.log("Creating authentication configuration")
        processutil.doExec(["htpasswd", "-cbm", "-m", os.path.join(self.revikiSvnPath, "conf", "svn-auth-file"), "user1", "password1"])
        processutil.doExec(["htpasswd", "-bm", "-s", os.path.join(self.revikiSvnPath, "conf", "svn-auth-file"), "user2", "password2"])

        self.extraReplacements = {"SVN_PATH": self.revikiSvnPath}

        return super(WebTests, self).setUp()

    def runTests(self):
        self.log("Configuring reviki")
        self._writeConfigFile()
        self.antProperties.extend([
            "wiki.url=" + self.jettyUrl.rstrip("/"),
            "wiki.svn=http://localhost:%d/subversion/test/" % self.httpdPort,
            "wiki.username=user1",
            "wiki.password=password1",
            "wiki.altusername=user2",
            "wiki.altpassword=password2",
        ])
        result = super(WebTests, self).runTests()
        return result

    def _writeConfigFile(self):
        fileutil.makedirs(self.revikiDataDir)
        with open(os.path.join(self.revikiDataDir, "reviki.properties"), "w") as out:
            out.write("svn-url-test=http\\://localhost\\:%d/subversion/test/decimate-test-wiki-data\n" % self.httpdPort)


class PublishedReleases(PublishedReleasesTestConfiguration, EmailTestConfiguration):
    emailAddresses = emailAddresses

# vim: set ft=python expandtab ts=4 :
